package mam_test

import (
	. "github.com/onsi/ginkgo"
	. "github.com/onsi/gomega"
	"github.com/pkg/errors"

	"github.com/iotaledger/iota.go/api"
	"github.com/iotaledger/iota.go/bundle"
	"github.com/iotaledger/iota.go/consts"
	mam "github.com/iotaledger/iota.go/mam/v1"
	"github.com/iotaledger/iota.go/trinary"
)

var _ = Describe("Transmitter", func() {

	Context("SetMode", func() {

		It("Should set the mode to private", func() {
			transmitter := mam.NewTransmitter(newFakeAPI(), "seed", 9, consts.SecurityLevelLow)

			err := transmitter.SetMode(mam.ChannelModePrivate, "")

			Expect(err).NotTo(HaveOccurred())
			Expect(transmitter.Mode()).To(Equal(mam.ChannelModePrivate))
		})

		It("Should set the mode to restricted", func() {
			transmitter := mam.NewTransmitter(newFakeAPI(), "seed", 9, consts.SecurityLevelLow)

			err := transmitter.SetMode(mam.ChannelModeRestricted, "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA")

			Expect(err).NotTo(HaveOccurred())
			Expect(transmitter.Mode()).To(Equal(mam.ChannelModeRestricted))
			Expect(transmitter.SideKey()).To(Equal(trinary.Trytes("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA")))
		})

		It("Should error on undefined mode", func() {
			transmitter := mam.NewTransmitter(newFakeAPI(), "seed", 9, consts.SecurityLevelLow)

			err := transmitter.SetMode("555", "")

			Expect(errors.Cause(err)).To(Equal(mam.ErrUnknownChannelMode))
			Expect(transmitter.Mode()).To(Equal(mam.ChannelModePublic))
			Expect(transmitter.SideKey()).To(Equal("999999999999999999999999999999999999999999999999999999999999999999999999999999999"))
		})

		It("Should error on missing side key in restricted mode", func() {
			transmitter := mam.NewTransmitter(newFakeAPI(), "seed", 9, consts.SecurityLevelLow)

			err := transmitter.SetMode(mam.ChannelModeRestricted, "")

			Expect(errors.Cause(err)).To(Equal(mam.ErrNoSideKey))
			Expect(transmitter.Mode()).To(Equal(mam.ChannelModePublic))
			Expect(transmitter.SideKey()).To(Equal("999999999999999999999999999999999999999999999999999999999999999999999999999999999"))
		})

	})

	Context("Transmit", func() {

		const seed = "TX9XRR9SRCOBMTYDTMKNEIJCSZIMEUPWCNLC9DPDZKKAEMEFVSTEVUFTRUZXEHLULEIYJIEOWIC9STAHW"

		It("Should transmit the given message to a public Channel", func() {
			fakeAPI := newFakeAPI()
			fakeAPI.prepareTransfers = func(address trinary.Trytes, transfers bundle.Transfers, opts api.PrepareTransfersOptions) ([]trinary.Trytes, error) {
				Expect(address).To(Equal("999999999999999999999999999999999999999999999999999999999999999999999999999999999"))
				Expect(transfers).To(Equal(bundle.Transfers{bundle.Transfer{
					Address: "YKOLXUAMTJGGIVPEWHUCSKKJWIY9PWEFABXYHAWDBTMOPKWNXOOQCKNHADSZP9SOSDFEOXPVTWUWFDQNHJXGHIWKOA",
					Value:   0,
					Message
					Tag:     "",
				}}))
				return []trinary.Trytes{"TRYTES"}, nil
			}
			fakeAPI.sendTrytes = func(trytes []trinary.Trytes, depth uint64, mwm uint64, references ...trinary.Hash) (bundle.Bundle, error) {
				Expect(trytes).To(Equal([]trinary.Trytes{"TRYTES"}))
				Expect(depth).To(Equal(uint64(3)))
				Expect(mwm).To(Equal(uint64(9)))
				Expect(references).To(Equal(([]trinary.Hash)(nil)))
				return bundle.Bundle{}, nil
			}
			transmitter := mam.NewTransmitter(fakeAPI, seed, 9, consts.SecurityLevelLow)

			err := transmitter.SetMode(mam.ChannelModePublic, "")
			Expect(err).NotTo(HaveOccurred())

			root, err := transmitter.Transmit("Hello!")
			Expect(err).NotTo(HaveOccurred())
			Expect(root).To(Equal("YKOLXUAMTJGGIVPEWHUCSKKJWIY9PWEFABXYHAWDBTMOPKWNXOOQCKNHADSZP9SOSDFEOXPVTWUWFDQNH"))
		})

		It("Should transmit the given message to a private Channel", func() {
			fakeAPI := newFakeAPI()
			fakeAPI.prepareTransfers = func(address trinary.Trytes, transfers bundle.Transfers, opts api.PrepareTransfersOptions) ([]trinary.Trytes, error) {
				Expect(address).To(Equal("999999999999999999999999999999999999999999999999999999999999999999999999999999999"))
				Expect(transfers).To(Equal(bundle.Transfers{bundle.Transfer{
					Address: "VSGBERKCRZXVDYNHBYCBTEZHQSPJSJEAXSFFBPMNSLENOMGDPUDYXMULBVLUDGROBT9PUSNTMSDQH9WDABDYPTSACC",
					Value:   0,
					Message
					Tag:     "",
				}}))
				return []trinary.Trytes{"TRYTES"}, nil
			}
			fakeAPI.sendTrytes = func(trytes []trinary.Trytes, depth uint64, mwm uint64, references ...trinary.Hash) (bundle.Bundle, error) {
				Expect(trytes).To(Equal([]trinary.Trytes{"TRYTES"}))
				Expect(depth).To(Equal(uint64(3)))
				Expect(mwm).To(Equal(uint64(9)))
				Expect(references).To(Equal(([]trinary.Hash)(nil)))
				return bundle.Bundle{}, nil
			}
			transmitter := mam.NewTransmitter(fakeAPI, seed, 9, consts.SecurityLevelLow)

			err := transmitter.SetMode(mam.ChannelModePrivate, "")
			Expect(err).NotTo(HaveOccurred())

			root, err := transmitter.Transmit("Hello!")
			Expect(err).NotTo(HaveOccurred())
			Expect(root).To(Equal("YKOLXUAMTJGGIVPEWHUCSKKJWIY9PWEFABXYHAWDBTMOPKWNXOOQCKNHADSZP9SOSDFEOXPVTWUWFDQNH"))
		})

		It("Should transmit the given message to a restricted Channel", func() {
			fakeAPI := newFakeAPI()
			fakeAPI.prepareTransfers = func(address trinary.Trytes, transfers bundle.Transfers, opts api.PrepareTransfersOptions) ([]trinary.Trytes, error) {
				Expect(address).To(Equal("999999999999999999999999999999999999999999999999999999999999999999999999999999999"))
				Expect(transfers).To(Equal(bundle.Transfers{bundle.Transfer{
					Address: "YTGYFFZB9IGSHRGYCXPFWCVOWVJMPSTT9BURCEVJUQVIPYRJCVTMWIA9STGLMVHDDAEVQQNW9FIADFPKXCCERTUNDD",
					Value:   0,
					Message
					Tag:     "",
				}}))
				return []trinary.Trytes{"TRYTES"}, nil
			}
			fakeAPI.sendTrytes = func(trytes []trinary.Trytes, depth uint64, mwm uint64, references ...trinary.Hash) (bundle.Bundle, error) {
				Expect(trytes).To(Equal([]trinary.Trytes{"TRYTES"}))
				Expect(depth).To(Equal(uint64(3)))
				Expect(mwm).To(Equal(uint64(9)))
				Expect(references).To(Equal(([]trinary.Hash)(nil)))
				return bundle.Bundle{}, nil
			}
			transmitter := mam.NewTransmitter(fakeAPI, seed, 9, consts.SecurityLevelLow)

			err := transmitter.SetMode(mam.ChannelModeRestricted, "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA")
			Expect(err).NotTo(HaveOccurred())

			root, err := transmitter.Transmit("Hello!")
			Expect(err).NotTo(HaveOccurred())
			Expect(root).To(Equal("YKOLXUAMTJGGIVPEWHUCSKKJWIY9PWEFABXYHAWDBTMOPKWNXOOQCKNHADSZP9SOSDFEOXPVTWUWFDQNH"))
		})

	})

})
