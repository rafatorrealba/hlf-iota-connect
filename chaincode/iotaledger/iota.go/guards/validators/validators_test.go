package validators_test

import (
	"github.com/iotaledger/iota.go/bundle"
	. "github.com/iotaledger/iota.go/consts"
	. "github.com/iotaledger/iota.go/guards/validators"
	. "github.com/onsi/ginkgo"
	. "github.com/onsi/gomega"
)

var _ = Describe("Validators", func() {

	Context("ValidateNonEmptyStringSlice()", func() {
		It("shouldn't return an error for valid strings", func() {
			Expect(ValidateNonEmptyStrings(ErrInvalidTrytes, []string{"123", "321"}...)()).
				ToNot(HaveOccurred())
		})
		It("should return the specified error for invalid slice", func() {
			Expect(ValidateNonEmptyStrings(ErrInvalidTrytes, []string{}...)()).
				To(HaveOccurred())
		})
	})

	Context("ValidateTransactionHashes()", func() {
		It("shouldn't return an error for valid hashes", func() {
			Expect(ValidateTransactionHashes("I9GLMICBJTETFVYUFIJRXTSANYQC9PZCCYREMLDYNJLYTR9LUEK9CAHKQZGLBGZRMVXBLP99EUHMZ9999")()).
				ToNot(HaveOccurred())
		})

		It("should return an error for invalid hashes", func() {
			Expect(ValidateTransactionHashes("ABCDEFG")()).
				To(HaveOccurred())
		})
	})

	Context("ValidateHashes()", func() {
		It("shouldn't return an error for valid hashes", func() {
			Expect(ValidateHashes(
				"I9GLMICBJTETFVYUFIJRXTSANYQC9PZCCYREMLDYNJLYTR9LUEK9CAHKQZGLBGZRMVXBLP99EUHMZ9999",
				"YQSPGXZQUYXQUKDKBECDPLPBVJGHGMAHYWBKGCBOVBRBYOGWAENUMSMOQWFMP9KOWNTNOZUOGZOXVZZPABMVEOGLI9",
			)()).
				ToNot(HaveOccurred())
		})

		It("should return an error for valid hashes", func() {
			Expect(ValidateHashes(
				"I9GLMICBJTETFVYUFIJRXTSANYQC9PZCCYREMLDYNabcdLYTR9LUEK9CAHKQZGLBGZRMVXBLP99EUHMZ9999",
				"YQSPGXZQUYXQUKDKBECDPLPavcdMSMOQWFMP9KOWNTNOZUOGZOXVZZPABMVEOGLI9",
			)()).
				To(HaveOccurred())
		})
	})

	Context("ValidateTransactionTrytes()", func() {
		It("shouldn't return an error for valid trytes", func() {
			Expect(ValidateTransactionTrytes(
				
				
			)()).
				ToNot(HaveOccurred())
		})

		It("should return an error for invalid trytes", func() {
			Expect(ValidateTransactionTrytes(
				"abcdef",
				"999999999999999",
			)()).
				To(HaveOccurred())
		})
	})

	Context("ValidateAttachedTransactionTrytes()", func() {
		It("shouldn't return an error for valid trytes", func() {
			Expect(ValidateAttachedTransactionTrytes(
				
				
			)()).
				ToNot(HaveOccurred())
		})

		It("should return an error for invalid trytes", func() {
			Expect(ValidateAttachedTransactionTrytes(
				"abcdef",
				"999999999999999",
			)()).
				To(HaveOccurred())
		})
	})

	Context("ValidateTags()", func() {
		It("shouldn't return an error for valid tags", func() {
			Expect(ValidateTags(
				"99999999THE9IOTA9MIXER9BETA",
				"TRAVELING999IOTA99999999999",
			)()).
				ToNot(HaveOccurred())
		})

		It("should return an error for invalid tags", func() {
			Expect(ValidateTags(
				"abcdef",
				"999999999999999",
			)()).
				To(HaveOccurred())
		})
	})

	Context("ValidateURIs()", func() {
		It("shouldn't return an error for valid uris", func() {
			Expect(ValidateURIs(
				"tcp://example.com:14600",
				"udp://balalaika.com",
			)()).
				ToNot(HaveOccurred())
		})

		It("should return an error for invalid uris", func() {
			Expect(ValidateTags(
				"tcp:// example.com : 14600",
				"",
			)()).
				To(HaveOccurred())
		})
	})

	Context("ValidateSecurityLevel()", func() {
		It("shouldn't return an error for valid security level", func() {
			Expect(ValidateSecurityLevel(SecurityLevelMedium)()).ToNot(HaveOccurred())
		})

		It("should return an error for invalid security level", func() {
			Expect(ValidateSecurityLevel(SecurityLevel(-1))()).To(HaveOccurred())
			Expect(ValidateSecurityLevel(SecurityLevel(4))()).To(HaveOccurred())
			Expect(ValidateSecurityLevel(SecurityLevel(0))()).To(HaveOccurred())
		})
	})

	Context("ValidateSeed()", func() {
		It("shouldn't return an error for valid seed", func() {
			Expect(ValidateSeed("JEDDPBHQSSKN9TDZVDITVFHFZOGXKUHGUATPHLLVJCVOQFCAFRBJATLVZLPCHVUKTHATGANRCIETJRGBB")()).ToNot(HaveOccurred())
		})

		It("should return an error for invalid seed", func() {
			Expect(ValidateSeed("JED8PBHQS7KN9TDZVDIT2FHFZOGXKUHG3ATPHLLVJCVOQFCAFRBJATLVZLPCHVUKTHATGANRCIETJRGBB")()).To(HaveOccurred())
		})
	})

	Context("ValidateStartEndOptions()", func() {
		It("shouldn't return an error for valid start end options", func() {
			Expect(ValidateStartEndOptions(0, nil)()).ToNot(HaveOccurred())
			var e uint64
			e = 100
			Expect(ValidateStartEndOptions(0, &e)()).ToNot(HaveOccurred())
			e = 500
			Expect(ValidateStartEndOptions(0, &e)()).ToNot(HaveOccurred())
		})

		It("should return an error for invalid start end options", func() {
			var e uint64
			e = 2
			Expect(ValidateStartEndOptions(5, &e)()).To(HaveOccurred())
			e = 2000
			Expect(ValidateStartEndOptions(0, &e)()).To(HaveOccurred())
		})
	})

	Context("ValidateTransfers()", func() {
		It("shouldn't return an error for valid transfers", func() {
			Expect(ValidateTransfers(bundle.Transfers{
				{
					Address: "RYOVHGWRAGWNHYGHXPCZJ9ITSEMVCTC9RXKJDLEJTLBJGPUQ9XPJRXDZXNQPMIUYFSESOLSGWTCSDSQNX",
					Tag:     "TRAVELING999IOTA99999999999",
					Value:   50,
					Message: "ABCD",
				},
				{
					Address: "EHDTVTIMETJERHIRPKSEUBHEFEIHRHXXYVBXUFUIGYVIKTK9HJFMROL9MJKLLNFLGQDBYNKKYFQNBWZVX",
					Tag:     "MINEIOTADOTCOM9999999999999",
					Value:   100,
					Message: "ABCD",
				},
			}...)()).ToNot(HaveOccurred())
		})

		It("should return an error for invalid transfers", func() {
			Expect(ValidateTransfers(bundle.Transfers{
				{
					Address: "ABCDEF",
					Tag:     "TRAVELING999IOTA99999999999",
					Value:   50,
					Message: "ABCD",
				},
				{
					Address: "EHDTVTIM",
					Tag:     "MINEIOTADOTC",
					Value:   100,
					Message: "abcdef",
				},
			}...)()).To(HaveOccurred())
		})
	})

})
